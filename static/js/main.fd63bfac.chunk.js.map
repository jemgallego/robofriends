{"version":3,"sources":["components/Card.js","components/CardList.js","components/Timer.js","components/Button.js","components/Menu.js","components/StartScreen.js","components/GameFinished.js","components/ErrorBoundary.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","index","shouldFlip","cardAnimation","animations","setResetCounter","useState","isFlipped","setIsFlipped","display","setDisplay","useEffect","timeout","setTimeout","reset","clearTimeout","handleClick","onClick","className","alt","src","CardList","robots","incrementMoves","incrementMatchFound","currentIndex","setCurrentIndex","previousIndex","setPreviousIndex","cardsPicked","setCardsPicked","resetCounter","ANIMATIONS","cardsMatch","useCallback","console","log","map","robot","i","key","Timer","gameActive","gameFinished","seconds","setSeconds","isActive","setIsActive","displayTime","setDisplayTime","interval","format","time","toString","padStart","setInterval","sec","displayMinutes","displaySeconds","Math","floor","clearInterval","STYLES","SIZES","Button","disabled","buttonStyle","buttonSize","type","children","setButtonStyle","includes","setButtonSize","Menu","mainButtonText","toggleGameStatus","setRobotCount","moves","ROBOTS","isDisabled","setIsDisabled","difficulty","setDifficulty","changeDifficulty","level","StartScreen","GameFinished","ErrorBoundary","state","hasError","error","info","this","setState","props","Component","App","restartGame","robotCount","updateRobots","createDeck","matchFound","shuffle","array","length","j","random","pickedRobots","slice","concat","component","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qUA2CeA,G,MAvCF,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,GAAIC,EAAyE,EAAzEA,KAAMC,EAAmE,EAAnEA,MAAOC,EAA4D,EAA5DA,WAAYC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,gBAAqB,EAC1DC,oBAAS,GADiD,mBACrFC,EADqF,KAC1EC,EAD0E,OAE9DF,mBAAS,IAFqD,mBAErFG,EAFqF,KAE5EC,EAF4E,KAI5FC,qBAAW,WACV,GAAIR,IAAkBC,EAAW,GAAI,CACpC,IAAMQ,EAAUC,YAAY,WAC3BV,IAAkBC,EAAW,GAAKI,GAAa,GAAQE,EAAW,OAClEL,GAAgB,SAAAS,GAAK,OAAIA,EAAQ,OAC/B,KAEH,OAAO,kBAAMC,aAAaH,OAEzB,CAACT,EAAeC,EAAYC,IAE/B,IAAMW,EAAc,WACfT,GAAaL,EAAWD,IAC3BO,GAAa,IAIf,OACC,kBAAC,IAAD,CAAeD,UAAWA,GACzB,yBAAKU,QAASD,EAAaE,UAAS,UAAKT,EAAL,+DACnC,yBAAKU,IAAI,SAASC,IAAG,+BAA0BrB,EAA1B,mBACrB,6BACC,wBAAImB,UAAU,aAAalB,KAI7B,yBAAKiB,QAASD,EAAaE,UAAS,UAAKT,EAAL,0EACnC,yBAAKS,UAAU,+BACd,+CC0DUG,EA3FE,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,oBAAyB,EAC3BlB,oBAAU,GADiB,mBAC5DmB,EAD4D,KAC9CC,EAD8C,OAEzBpB,oBAAU,GAFe,mBAE5DqB,EAF4D,KAE7CC,EAF6C,OAG7BtB,mBAAS,GAHoB,mBAG5DuB,EAH4D,KAG/CC,EAH+C,OAI3BxB,mBAAS,GAJkB,mBAI5DyB,EAJ4D,KAI9C1B,EAJ8C,KAM7D2B,EAAa,CAAC,OAAQ,WAAY,QAElCC,EAAaC,uBAAY,WAC9B,OAAIZ,EAAOK,GAAe3B,OAASsB,EAAOG,GAAczB,OAKvD,CAACsB,EAAQG,EAAcE,IAEzBhB,qBAAU,WACY,IAAjBoB,IACHH,GAAkB,GAClBF,GAAiB,GACjBI,EAAe,GACfzB,EAAgB,MAEf,CAAC0B,IAEJpB,qBAAU,WACW,IAAhBkB,IACHN,IAEIU,KACHT,OAGA,CAACK,EAAaN,EAAgBU,EAAYT,IAE7C,IAgBMtB,EAAa,SAACD,GAKnB,OAJAkC,QAAQC,IAAIT,GACZQ,QAAQC,IAAIX,GACZU,QAAQC,IAAIP,IAEW,IAAnBF,IACHC,EAAiBH,GACjBC,EAAgBzB,GAChB6B,EAAeD,EAAc,IAEtB,IAMT,OACC,yBAAKX,UAAU,yDACf,kBAAC,WAAD,KAEKI,EAAOe,KAAK,SAACC,EAAMC,GACrB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLtC,MAASsC,EACTxC,GAAIuC,EAAMvC,GACVC,KAAMsC,EAAMtC,KACZE,WAAcA,EACdC,eA5CiBF,EA4CcsC,EAzChB,IAAhBV,GAAsB5B,IAAU0B,GAAiB1B,IAAUwB,EAOpDO,EAAW,GANjBC,IACOD,EAAW,GAEXA,EAAW,IAsClB3B,gBAAmBA,EACnBD,WAAc4B,IA9CE,IAAC/B,QCYTwC,EAhDD,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAA+B,KAAnBC,aACErC,mBAAS,IADQ,mBACxCsC,EADwC,KAC/BC,EAD+B,OAEfvC,mBAASoC,GAFM,mBAExCI,EAFwC,KAE9BC,EAF8B,OAGTzC,mBAAS,SAHA,mBAGxC0C,EAHwC,KAG3BC,EAH2B,KAyC/C,OApCAtC,qBAAU,WACT,IAAIuC,EAAW,KAIf,GAFAH,EAAYL,GAERI,EAAU,CACb,IAAMK,EAAS,SAACC,GACf,OAAOA,EAAKC,WAAWC,SAAS,EAAE,MAGnCJ,EAAWK,aAAY,WACtBV,GAAW,SAAAW,GAAG,OAAIA,EAAM,OACtB,KAEH,IAAIC,EACAC,EAAiB,GAGpBA,EAAiBP,EADdP,EAAU,GACWA,EAEAA,EAAU,IAGnCa,EAAiBN,EAAOQ,KAAKC,MAAMhB,EAAU,KAE7CK,EAAe,GAAD,OAAIQ,EAAJ,YAAsBC,SAEzBZ,GAAwB,IAAZF,IACvBC,EAAW,GACXE,GAAY,GACZc,cAAcX,IAGf,OAAO,kBAAMW,cAAcX,MACzB,CAACJ,EAAUF,EAASF,IAGtB,0BAAMxB,UAAY,OAAlB,SACQ8B,IC1CJc,G,MAAS,CACd,sBACA,sBACA,qBACA,sBACA,yBAGKC,EAAQ,CAAC,aAAc,cAAe,cAmB7BC,EAjBA,SAAC,GAAkE,IAAjEC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,WAAYlD,EAA6B,EAA7BA,QAASmD,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAE5DC,EAAiBR,EAAOS,SAASL,GAAeA,EAAcJ,EAAO,GAErEU,EAAgBT,EAAMQ,SAASJ,GAAcA,EAAaJ,EAAM,GAEtE,OACC,4BACCE,SAAUA,EACV/C,UAAS,cAASoD,EAAT,YAA2BE,EAA3B,YAA4CP,EAAW,UAAY,GAAnE,aACThD,QAASA,EACTmD,KAAMA,GACLC,IC6DWI,EAlFF,SAAC,GAA0E,IAkBnFC,EAlBWhC,EAAuE,EAAvEA,WAAYC,EAA2D,EAA3DA,aAAcgC,EAA6C,EAA7CA,iBAAkBC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MACpEC,EAAS,CAAC,EAAG,EAAG,IADgE,EAMlDxE,mBAASoC,GANyC,mBAM/EqC,EAN+E,KAMnEC,EANmE,OAOlD1E,mBAJrB,UAHuE,mBAO/E2E,EAP+E,KAOnEC,EAPmE,KAShFC,EAAmB,SAACC,EAAO7C,GAChCqC,EAAcE,EAAOvC,IACrB2C,EAAcE,IAGTd,EAAiB,SAACc,GACvB,OAAOH,IAAeG,EAAQ,sBAAwB,wBAevD,OATCV,EADGhC,EACc,WAEAC,EAAe,aAAe,aAGhDhC,qBAAW,WACVqE,EAActC,KACZ,CAACA,IAGH,yBAAKxB,UAAU,iCACd,yBAAKA,UAAS,kDAA6CyB,EAAe,SAAW,iBACpF,kBAAC,EAAD,CAAOD,WAAYA,EAAYC,aAAcA,IAC7C,0BAAMzB,UAAU,OAAhB,UAA8B2D,IAE/B,yBAAK3D,UAAW,uBACf,kBAAC,EAAD,CACCD,QAAS,WACR0D,IACAK,GAAeD,IAEhBX,KAAM,SACNF,YAAexB,EAAqC,qBAAxB,sBAC5ByB,WAAY,eAEXO,IAGH,yBAAKxD,UAAW,uBACf,0BAAMA,UAAU,0BAAhB,gBACA,kBAAC,EAAD,CACCD,QAAS,kBAAMkE,EAlDN,OAkD6B,IACtCf,KAAK,SACLF,YAAaI,EApDJ,QAqDTH,WAAW,aACXF,SAAUc,GALX,SASA,kBAAC,EAAD,CACC9D,QAAS,kBAAMkE,EA1DJ,SA0D6B,IACxCf,KAAM,SACNF,YAAaI,EA5DF,UA6DXH,WAAW,aACXF,SAAUc,GALX,WASA,kBAAC,EAAD,CACC9D,QAAS,kBAAMkE,EAlEN,OAkE6B,IACtCf,KAAK,SACLF,YAAaI,EApEJ,QAqETH,WAAW,aACXF,SAAUc,GALX,YCtDWM,EAjBK,WAEnB,OACC,yBAAKnE,UAAU,mCACd,wBAAIA,UAAY,oBAAhB,0BACA,wBAAIA,UAAU,WAAd,cACA,uBAAGA,UAAU,qBAAb,kLAGC,6BAAK,6BAHN,iFCIYoE,EAVM,WAEpB,OACC,yBAAKpE,UAAU,4BACd,wBAAIA,UAAU,wBAAd,oBACA,uBAAGA,UAAU,gBAAb,8BCeYqE,E,kDAnBd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,UAAU,GAHE,E,8DAOIC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,yDAEDG,KAAKE,MAAMzB,a,GAhBQ0B,aCFfzE,EAAS,CACpB,CACEvB,GAAI,EACJC,KAAM,WAER,CACED,GAAI,EACJC,KAAM,QAER,CACED,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,QAER,CACED,GAAI,EACJC,KAAM,WAER,CACED,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,QAER,CACED,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,QAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,GACJC,KAAM,UAER,CACED,GAAI,GACJC,KAAM,WAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,GACJC,KAAM,OAER,CACED,GAAI,GACJC,KAAM,SAER,CACED,GAAI,GACJC,KAAM,QAER,CACED,GAAI,GACJC,KAAM,QAER,CACED,GAAI,GACJC,KAAM,WCsBKgG,G,wDA3Fd,aAAe,IAAD,8BACb,gBAYDrB,iBAAmB,WAClB,EAAKkB,SAAS,CAACnD,YAAa,EAAK8C,MAAM9C,YAAa,EAAKuD,cAd5C,EAiBdrB,cAAgB,SAACsB,GAChB,EAAKL,SAAS,CAACK,WAAYA,GAAa,EAAKC,eAlBhC,EAqBdF,YAAc,WACb,EAAKJ,SAAS,CAACvE,OAAQ,EAAK8E,WAAW9E,KAEnC,EAAKkE,MAAM9C,aACd,EAAKmD,SAAS,CAAChB,MAAO,IACtB,EAAKgB,SAAS,CAACQ,WAAY,IAC3B,EAAKR,SAAS,CAAClD,cAAc,MA3BjB,EA+BdpB,eAAiB,WAChB,EAAKsE,SAAS,CAAChB,MAAO,EAAKW,MAAMX,MAAQ,KAhC5B,EAmCdrD,oBAAsB,WACrB,EAAKqE,SAAS,CAAEQ,WAAY,EAAKb,MAAMa,WAAa,IAAI,WACnD,EAAKb,MAAMa,aAAe,EAAKb,MAAMU,aACxC,EAAKL,SAAS,CAAClD,cAAc,IAC7B,EAAKkD,SAAS,CAACnD,YAAY,SAvChB,EA4Cd0D,WAAa,SAAC9E,GACb,IAAMgF,EAAU,SAACC,GAChB,IAAK,IAAIhE,EAAIgE,EAAMC,OAAS,EAAGjE,EAAI,EAAGA,IAAK,CAC1C,IAAIkE,EAAI9C,KAAKC,MAAMD,KAAK+C,UAAYnE,EAAI,IADE,EAEnB,CAACgE,EAAME,GAAIF,EAAMhE,IAAvCgE,EAAMhE,GAFmC,KAE/BgE,EAAME,GAFyB,KAK3C,OAAOF,GAIJI,EADiBL,EAAQhF,GACKsF,MAAM,EAAE,EAAKpB,MAAMU,YAGrD,OAAOI,EAFYK,EAAaE,OAAOF,KArDvC,EAAKnB,MAAQ,CACZlE,OAAQA,EACRoB,YAAY,EACZC,cAAc,EACduD,WAAY,EACZG,WAAY,EACZxB,MAAO,GATK,E,gEA8Dbe,KAAKC,SAAS,CAACvE,OAAQsE,KAAKQ,WAAW9E,O,+BAG9B,IAAD,EAC4CsE,KAAKJ,MAAjDlE,EADA,EACAA,OAAQoB,EADR,EACQA,WAAYmC,EADpB,EACoBA,MAAOlC,EAD3B,EAC2BA,aAE7BmE,EAAYnE,EAAe,kBAAC,EAAD,MAAmB,kBAAC,EAAD,MAEpD,OACC,yBAAKzB,UAAU,mBACd,wBAAIA,UAAU,WAAd,cACA,kBAAC,EAAD,CACCwB,WAAYA,EACZC,aAAcA,EACdgC,iBAAkBiB,KAAKjB,iBACvBC,cAAegB,KAAKhB,cACpBC,MAAOA,IAGP,kBAAC,EAAD,MACGnC,GAAcoE,EACfpE,GAAc,kBAAC,EAAD,CAAUpB,OAAQA,EAAQC,eAAgBqE,KAAKrE,eAAgBC,oBAAqBoE,KAAKpE,uBAEzG,uBAAGN,UAAU,OAAb,gCAAgD,uBAAGA,UAAU,aAAa6F,KAAK,wBAA/B,sB,GAtFnChB,cCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLvD,QAAQuD,MAAMA,EAAMuC,c","file":"static/js/main.fd63bfac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport './card.css';\n\nconst Card = ({ id, name, index, shouldFlip, cardAnimation, animations, setResetCounter}) => {\n\tconst [isFlipped, setIsFlipped] = useState(true);\n\tconst [display, setDisplay] = useState('');\n\t\n\tuseEffect( () => {\n\t\tif (cardAnimation !== animations[0]) {\n\t\t\tconst timeout = setTimeout( () => {\n\t\t\t\tcardAnimation === animations[1] ? setIsFlipped(true) : setDisplay('o-0');\n\t\t\t\tsetResetCounter(reset => reset + 1);\n\t\t\t}, 1000);\n\n\t\t\treturn () => clearTimeout(timeout);\n\t\t}\n\t}, [cardAnimation, animations, setResetCounter]);\n\n\tconst handleClick = () => {\n\t\tif (isFlipped && shouldFlip(index)) {\n\t\t\tsetIsFlipped(false);\n\t\t}\n\t}\n\t\n\treturn (\n\t\t<ReactCardFlip isFlipped={isFlipped}>\n\t\t\t<div onClick={handleClick} className={`${display} tc bg-light-green dib br3 pa3 ma2 grow shadow-5 card-size`}>\n\t\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?size=120x120`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h3 className='dark-gray'>{name}</h3>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div onClick={handleClick} className={`${display} tc bg-near-black light-green dib br3 pa3 ma2 grow shadow-5 card-size`}>\n\t\t\t\t<div className='flex items-center card-back'>\n\t\t\t\t\t<h2>Robo Match</h2>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ReactCardFlip>\n\t);\n}\n\nexport default Card;\n","import React, { Fragment, useState, useEffect, useCallback } from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots, incrementMoves, incrementMatchFound}) => {\n\tconst [currentIndex, setCurrentIndex] = useState(-1);\n\tconst [previousIndex, setPreviousIndex] = useState(-1);\n\tconst [cardsPicked, setCardsPicked] = useState(0);\n\tconst [resetCounter, setResetCounter] = useState(0);\n\n\tconst ANIMATIONS = ['none', 'flipback', 'fade'];\n\n\tconst cardsMatch = useCallback(() => {\n\t\tif (robots[previousIndex].name === robots[currentIndex].name) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},[robots, currentIndex, previousIndex]);\n\n\tuseEffect(() => {\n\t\tif (resetCounter === 2) {\n\t\t\tsetPreviousIndex(-1);\n\t\t\tsetCurrentIndex(-1);\n\t\t\tsetCardsPicked(0);\n\t\t\tsetResetCounter(0);\n\t\t}\n\t}, [resetCounter]);\n\n\tuseEffect(() => {\n\t\tif (cardsPicked === 2) {\n\t\t\tincrementMoves();\n\t\t\t\n\t\t\tif (cardsMatch()) {\n\t\t\t\tincrementMatchFound();\n\t\t\t}\n\t\t}\n\t}, [cardsPicked, incrementMoves, cardsMatch, incrementMatchFound]);\n\n\tconst cardAnimation = (index) => {\n\t\tlet animate; \n\n\t\tif (cardsPicked === 2 && (index === previousIndex || index === currentIndex)) {\n\t\t\tif (cardsMatch()) {\n\t\t\t\tanimate = ANIMATIONS[2];\n\t\t\t} else {\n\t\t\t\tanimate = ANIMATIONS[1];\n\t\t\t}\n\t\t} else {\n\t\t\tanimate = ANIMATIONS[0];\n\t\t}\n\n\t\treturn animate;\n\t}\n\n\tconst shouldFlip = (index) => {\n\t\tconsole.log(previousIndex);\n\t\tconsole.log(currentIndex);\n\t\tconsole.log(cardsPicked);\n\n\t\tif (previousIndex === -1) {\n\t\t\tsetPreviousIndex(currentIndex);\n\t\t\tsetCurrentIndex(index);\n\t\t\tsetCardsPicked(cardsPicked + 1);\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn (\n\t\t<div className='flex flex-wrap justify-center pv4 w-100 w-90-l center'> \n\t\t<Fragment> \n\t    \t{\n\t    \t\trobots.map( (robot,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tindex = {i}\n\t\t\t\t\t\t\tid={robot.id} \n\t\t\t\t\t\t\tname={robot.name} \n\t\t\t\t\t\t\tshouldFlip = {shouldFlip}\n\t\t\t\t\t\t\tcardAnimation = {cardAnimation(i)}\n\t\t\t\t\t\t\tsetResetCounter = {setResetCounter}\n\t\t\t\t\t\t\tanimations = {ANIMATIONS}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t    \t}\n\t    </Fragment>\n\t    </div>\n\t);\n}\n\nexport default CardList;","import React, { useState, useEffect } from 'react';\n\nconst Timer = ({ gameActive, gameFinished }) => {\n\tconst [seconds, setSeconds] = useState(0);\n\tconst [isActive, setIsActive] = useState(gameActive);\n\tconst [displayTime, setDisplayTime] = useState('00:00');\n\n\tuseEffect(() => {\n\t\tlet interval = null;\n\n\t\tsetIsActive(gameActive);\n\n\t\tif (isActive) {\n\t\t\tconst format = (time) => {\n\t\t\t\treturn time.toString().padStart(2,'0');\n\t\t\t}\n\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tsetSeconds(sec => sec + 1);\n\t\t\t}, 1000);\n\n\t\t\tlet displayMinutes = '';\n\t\t\tlet displaySeconds = '';\n\n\t\t\tif (seconds < 60) {\n\t\t\t\tdisplaySeconds = format(seconds);\n\t\t\t} else {\n\t\t\t\tdisplaySeconds = format(seconds % 60);\n\t\t\t}\n\n\t\t\tdisplayMinutes = format(Math.floor(seconds / 60));\n\n\t\t\tsetDisplayTime(`${displayMinutes}:${displaySeconds}`); \n\t\t\n\t\t} else if (!isActive && seconds !== 0) {\n\t\t\tsetSeconds(0);\n\t\t\tsetIsActive(false);\n\t\t\tclearInterval(interval);\n\t\t}\n\n\t\treturn () => clearInterval(interval);\n\t}, [isActive, seconds, gameActive]);\n\n\treturn (\n\t\t<span className ={'pa2'}>\n\t\t\tTime: {displayTime}\n\t\t</span>\n\t);\n}\n\nexport default Timer;\n\n\n\n\n","import React from 'react';\nimport './button.css'\n\nconst STYLES = [\n\t'btn--primary--solid',\n\t'btn--warning--solid',\n\t'btn--danger--solid',\n\t'btn--success--solid',\n\t'btn--disabled--solid'\n];\n\nconst SIZES = ['btn--small', 'btn--medium', 'btn--large'];\n\nconst Button = ({disabled, buttonStyle, buttonSize, onClick, type, children}) => {\n\n\tconst setButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0];\n\n\tconst setButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\n\n\treturn (\n\t\t<button \n\t\t\tdisabled={disabled} \n\t\t\tclassName={`btn ${setButtonStyle} ${setButtonSize} ${disabled ? 'noHover' : ''} mr2 mb2 `} \n\t\t\tonClick={onClick} \n\t\t\ttype={type}>\n\t\t\t{children}\n\t\t</button>\n\t)\n}\n\nexport default Button;","import React, { useState, useEffect } from 'react';\nimport Timer from './Timer';\nimport Button from './Button';\n\nconst Menu = ({ gameActive, gameFinished, toggleGameStatus, setRobotCount, moves }) => {\n\tconst ROBOTS = [6, 9, 12];\n\tconst EASY = 'EASY';\n\tconst NORMAL = 'NORMAL';\n\tconst HARD = 'HARD';\n\n\tconst [isDisabled, setIsDisabled] = useState(gameActive); \n\tconst [difficulty, setDifficulty] = useState(NORMAL);\n\t\n\tconst changeDifficulty = (level, i) => {\n\t\tsetRobotCount(ROBOTS[i]);\n\t\tsetDifficulty(level);\n\t}\n\n\tconst setButtonStyle = (level) => {\n\t\treturn difficulty === level ? 'btn--success--solid' : 'btn--disabled--solid';\n\t}\n\n\tlet mainButtonText; \n\n\tif (gameActive) {\n\t\tmainButtonText = 'End Game';\n\t} else {\n\t\tmainButtonText = gameFinished ? 'Play Again' : 'Start Game';\n\t}\n\n\tuseEffect (() => {\n\t\tsetIsDisabled(gameActive);\n\t}, [gameActive]);\n\n\treturn (\n\t\t<div className='flex flex-wrap justify-center'>\n\t\t\t<div className={`w-100 w-third-l f5 f3-l b pa3 helvetica ${gameFinished ? 'yellow' : 'washed-green'}`}>\n\t\t\t\t<Timer gameActive={gameActive} gameFinished={gameFinished} />\n\t\t\t\t<span className='ph4'>Moves: {moves}</span>\n\t\t\t</div>\n\t\t\t<div className ='w-100 w-third-l pv3'>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\ttoggleGameStatus();\n\t\t\t\t\t\tsetIsDisabled(!isDisabled);\n\t\t\t\t\t}} \n\t\t\t\t\ttype= 'button' \n\t\t\t\t\tbuttonStyle={ !gameActive ? 'btn--primary--solid' : 'btn--danger--solid'}\n\t\t\t\t\tbuttonSize= 'btn--medium'\n\t\t\t\t> \n\t\t\t\t\t{mainButtonText} \n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className ='w-100 w-third-l pa3'>\n\t\t\t\t<span className='f5 f4-l b washed-green'>Difficulty: </span>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => changeDifficulty(EASY, 0)}\n\t\t\t\t\ttype='button' \n\t\t\t\t\tbuttonStyle={setButtonStyle(EASY)}\n\t\t\t\t\tbuttonSize='btn--small'\n\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t> Easy \n\t\t\t\t</Button>\n\t\t\t\t\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => changeDifficulty(NORMAL, 1)}\n\t\t\t\t\ttype= 'button' \n\t\t\t\t\tbuttonStyle={setButtonStyle(NORMAL)}\n\t\t\t\t\tbuttonSize='btn--small'\n\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t> Normal \n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => changeDifficulty(HARD, 2)} \n\t\t\t\t\ttype='button' \n\t\t\t\t\tbuttonStyle={setButtonStyle(HARD)}\n\t\t\t\t\tbuttonSize='btn--small'\n\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t> Hard \n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Menu;","import React from 'react';\n\nconst StartScreen = () => {\n\n\treturn (\n\t\t<div className='washed-green w-80 w-60-l center'>\n\t\t\t<h2 className = 'f3 f1-l lh-title'>Train your memory with</h2>\n\t\t\t<h1 className='f3 f2-l'>Robo Match</h1>\n\t\t\t<p className='f4-l lh-copy tl b'> Click on a card to flip it and reveal the robot hiding underneath. \n\t\t\t\tIf you select 2 identical pictures, the matching pair disappears. \n\t\t\t\tRepeat until you find all matching pairs.\n\t\t\t\t<br/><br/>\n\t\t\t\tTry to find all the robot pairs with the least amount of time and/or moves.\n\t\t\t</p>\n\t\t</div>\n\t)\n\t\n}\n\nexport default StartScreen;","import React from 'react';\n\nconst GameFinished = () => {\n\t\n\treturn (\n\t\t<div className='washed-green w-60 center'>\n\t\t\t<h2 className='f3 f1-l lh-title ttu'>Congratulations!</h2>\n\t\t\t<p className='f4 lh-copy b'> Thank you for playing. </p>\n\t\t</div>\n\t)\n}\n\nexport default GameFinished;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooops. That is not good. </h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","export const robots = [\n  {\n    id: 1,\n    name: 'Gigabit'\n  },\n  {\n    id: 2,\n    name: 'Wire'\n  },\n  {\n    id: 3,\n    name: 'Rusty'\n  },\n  {\n    id: 4,\n    name: 'Mach'\n  },\n  {\n    id: 5,\n    name: 'Tracker'\n  },\n  {\n    id: 6,\n    name: 'Tinker'\n  },\n  {\n    id: 7,\n    name: 'Beta'\n  },\n  {\n    id: 8,\n    name: 'Socket'\n  },\n  {\n    id: 9,\n    name: 'Gage'\n  },\n  {\n    id: 10,\n    name: 'Scrap'\n  },\n  {\n    id: 11,\n    name: 'Sparky'\n  },\n  {\n    id: 12,\n    name: 'Ratchet'\n  },\n  {\n    id: 13,\n    name: 'Gearz'\n  },\n  {\n    id: 14,\n    name: 'Alpha'\n  },\n  {\n    id: 15,\n    name: 'Micro'\n  },\n  {\n    id: 16,\n    name: 'Uni'\n  },\n  {\n    id: 17,\n    name: 'Fiber'\n  },\n  {\n    id: 18,\n    name: 'Bolt'\n  },\n  {\n    id: 19,\n    name: 'Nuts'\n  },\n  {\n    id: 20,\n    name: 'Wrench'\n  }\n];\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Menu from '../components/Menu';\nimport StartScreen from '../components/StartScreen';\nimport GameFinished from '../components/GameFinished';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { robots } from '../robots';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\t\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tgameActive: false,\n\t\t\tgameFinished: false,\n\t\t\trobotCount: 9,\n\t\t\tmatchFound: 0,\n\t\t\tmoves: 0\n\t\t}\n\t}\n\n\ttoggleGameStatus = () => {\n\t\tthis.setState({gameActive: !this.state.gameActive}, this.restartGame);\n\t}\n\n\tsetRobotCount = (robotCount) => {\n\t\tthis.setState({robotCount: robotCount}, this.updateRobots);\n\t}\n\n\trestartGame = () => {\n\t\tthis.setState({robots: this.createDeck(robots)});\n\n\t\tif (this.state.gameActive) {\n\t\t\tthis.setState({moves: 0});\n\t\t\tthis.setState({matchFound: 0});\n\t\t\tthis.setState({gameFinished: false});\n\t\t}\n\t}\n\n\tincrementMoves = () => {\n\t\tthis.setState({moves: this.state.moves + 1});\n\t} \n\n\tincrementMatchFound = () => {\n\t\tthis.setState({ matchFound: this.state.matchFound + 1}, () => {\n\t\t\tif (this.state.matchFound === this.state.robotCount) {\n\t\t\t\tthis.setState({gameFinished: true});\n\t\t\t\tthis.setState({gameActive: false});\n\t\t\t}\n\t\t});\n\t} \n\n\tcreateDeck = (robots) => {\n\t\tconst shuffle = (array) => {\n\t\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\t\tlet j = Math.floor(Math.random() * (i + 1));\n\t\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} \n\n\t\tlet shuffledRobots = shuffle(robots);\n\t\tlet pickedRobots = shuffledRobots.slice(0,this.state.robotCount);\n\t\tlet clonedRobots = pickedRobots.concat(pickedRobots);\n\n\t\treturn shuffle(clonedRobots);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({robots: this.createDeck(robots)})\n\t}\n\n\trender() {\n\t\tconst { robots, gameActive, moves, gameFinished } = this.state;\n\n\t\tconst component = gameFinished ? <GameFinished /> : <StartScreen />\n\n\t\treturn (\n\t\t\t<div className='tc washed-green'>\n\t\t\t\t<h1 className='f2 f1-l'>Robo Match</h1>\n\t\t\t\t<Menu \n\t\t\t\t\tgameActive={gameActive} \n\t\t\t\t\tgameFinished={gameFinished}\n\t\t\t\t\ttoggleGameStatus={this.toggleGameStatus} \n\t\t\t\t\tsetRobotCount={this.setRobotCount} \n\t\t\t\t\tmoves={moves}\n\t\t\t\t/>\n\n\t\t \t\t<ErrorBoundary>\n\t\t \t\t\t{!gameActive && component}\n\t\t \t\t\t{gameActive && <CardList robots={robots} incrementMoves={this.incrementMoves} incrementMatchFound={this.incrementMatchFound} />}\n\t\t \t\t</ErrorBoundary>\n\t\t \t\t<p className='pt4'>Robots lovingly delivered by <a className='light-blue' href='https://robohash.org'>Robohash.org</a></p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}